# test_parser.hrtpy - v5 (Final Syntax Draft for Testing)
# Reflects: no bigint suffix, = for assignment (default mutable),
# f(p)=b definition, f(a) call, (p)=b lambda, ((p)=b)(a) immediate call,
# infix ops +-/* with precedence & (), case expr of pattern: result (indent-based),
# true/false bools, type ADT syntax, `code` quoting.

# --- Basic Assignments & Literals ---
x = 10
y = 12345678901234567890   # int / bigint decided later
message = "hello world"
is_valid = true
ratio = 0.5                # Floats parsed
another_str = "string with \"quotes\" and \\ backslash"

# --- Re-assignment (Default Mutable) ---
counter = 0
counter = counter + 1

# --- Function Definition ---
add(a, b) = a + b
greet(name) = "Hello, " + name + "!"
process(data, flag) = # Function body using indentation
  temp = data * 2
  case flag:
    of true: temp + 1
    of false: temp - 1
    default: temp

# --- Function Calls ---
sum_result = add(5, 3)
greeting = greet("Alice")
processed = process(10, true)

# --- Anonymous Functions ---
square = (x) = x * x
increment = (y) = y + 1
result = increment(square(4)) # 17

# --- Anonymous Function Immediate Call ---
immediate_square = ((x) = x * x)(5) # Should be 25
complex_immediate = ((a, b) = a + b * 2)(3, 4) # Should be 3 + 4*2 = 11

# --- Operators & Precedence ---
# Standard precedence: * / before + -
calc1 = 2 + 3 * 4       # Expect 14
calc2 = 10 - 8 / 2      # Expect 6
# Parentheses override precedence
calc3 = (2 + 3) * 4     # Expect 20
calc4 = (10 - 8) / 2    # Expect 1
# String operations
concat = "a" + "b" + "c" # Expect "abc"
repeat = "x" * 3        # Expect "xxx"
# Mixed (runtime handles types)
mixed_op = 10 + y       # y is bigint
str_num = message + 123 # Runtime converts 123?

# --- Comparisons and Logic ---
compare1 = x > 5
compare2 = counter <= 1
logic1 = true && false
logic2 = compare1 || compare2
logic3 = !is_valid

# --- Case Statement ---
value = 0
sign = case value:
  of 0: "zero"
  of n if n > 0: "positive" # Assuming guard clauses might be supported
  default: "negative"

# ADT Definition (Example)
type Option =
  Some(value: any)
| None

# ADT Creation
opt1 = Some(10)
opt2 = None

# Case statement with ADT matching
get_value(opt) = case opt:
  of Some(v): v
  of None: 0

val1 = get_value(opt1) # 10
val2 = get_value(opt2) # 0

# --- Code Quoting ---
setup_code = `
  initial_value = 100;
  rate = 0.05;
  calculate(initial_value, rate); # Assuming calculate is defined elsewhere
`

# --- Sequences (using semicolon) ---
a = 1; b = 2; c = a + b; print(c) # Assuming print exists

# --- Comments ---
# Full line comment
z = 5 # End of line comment