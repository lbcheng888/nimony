#ifndef L0_PRIMITIVES_H
#define L0_PRIMITIVES_H

#include "l0_types.h"
#include "l0_env.h"
#include "l0_arena.h"

// Forward declaration for the evaluator function, as primitives might call eval (though unlikely for L0)
// struct L0_Value;
// struct L0_Env;
// struct L0_Arena;
// typedef struct L0_Value* (*L0_EvalFunc)(struct L0_Value* expr, struct L0_Env* env, struct L0_Arena* arena);

/**
 * @brief Function pointer type for built-in primitive functions.
 * Primitives receive the list of evaluated arguments (as an L0 list),
 * the current environment (rarely needed for simple primitives),
 * and the arena for potential allocations.
 * They return the result of the primitive operation or NULL on error.
 * Error handling details (e.g., setting global error state) need to be defined.
 */
typedef L0_Value* (*L0_PrimitiveFunc)(L0_Value* args, L0_Env* env, L0_Arena* arena);

/**
 * @brief Registers all built-in primitive functions into the given environment.
 * This should typically be called once to populate the global environment.
 * @param env The environment (usually global) to register primitives in.
 * @param arena The arena to use for allocating primitive value objects.
 * @return True if all primitives were registered successfully, false otherwise.
 */
bool l0_register_primitives(L0_Env* env, L0_Arena* arena);

// --- Declarations for individual primitive functions ---
// These need to be visible to the C code generated by the compiler.
L0_Value* prim_cons(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_car(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_cdr(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_add(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_subtract(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_multiply(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_divide(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_equal(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_less_than(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_greater_than(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_pair_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_null_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_integer_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_boolean_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_symbol_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_string_q(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_float_q(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< Added float? primitive declaration
L0_Value* prim_not(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED not primitive declaration
L0_Value* prim_string_append(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_string_to_symbol(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_symbol_to_string(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_print(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_read_file(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_write_file(L0_Value* args, L0_Env* env, L0_Arena* arena);
L0_Value* prim_command_line_args(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< Added declaration
L0_Value* prim_parse_string(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED parse-string primitive
L0_Value* prim_codegen_program(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED codegen-program primitive
L0_Value* prim_append(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED append primitive
L0_Value* prim_eval(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED eval primitive
L0_Value* prim_apply(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED apply primitive
L0_Value* prim_eval_in_compiler_env(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED eval-in-compiler-env primitive for macros
L0_Value* prim_deref(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED deref primitive
L0_Value* prim_closure_p(L0_Value* args, L0_Env* env, L0_Arena* arena); // <<< ADDED closure? primitive
// Add other primitive declarations as they are implemented and needed by codegen

// --- Helper Function Declarations ---
// Declaration for the value-to-string helper (defined in l0_primitives.c)
// Needed by generated code for printing results.
int l0_value_to_string_recursive(L0_Value* value, char* buffer, size_t buf_size, L0_Arena* arena, int depth);


#endif // L0_PRIMITIVES_H
